{"version":3,"sources":["css-common.js","http-common.js","services/tutorial.service.js","components/add-tutorial.component.js","components/tutorial.component.js","components/tutorials-list.component.js","App.js","serviceWorker.js","index.js"],"names":["styles","appBar","backgroundColor","height","minHeight","name","marginRight","link","textTransform","color","margin","textDecoration","form","marginLeft","textField","search","marginTop","detail","edit","border","borderRadius","fontSize","fontWeight","publish","opacity","delete","update","buttonWrapper","button","removeAll","tutorial","axios","create","baseURL","headers","http","get","id","data","post","put","title","AddTutorial","props","onChangeTitle","bind","onChangeDescription","saveTutorial","newTutorial","state","description","published","submitted","e","this","setState","target","value","TutorialDataService","then","response","console","log","catch","classes","Fragment","className","Button","size","variant","onClick","TextField","label","onChange","required","Component","withStyles","Tutorial","getTutorial","updatePublished","updateTutorial","deleteTutorial","currentTutorial","message","match","params","prevState","status","history","push","type","TutorialsList","onChangeSearchTitle","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","searchTitle","tutorials","currentIndex","getAll","index","deleteAll","findByTitle","Grid","container","item","sm","xs","md","xl","lg","map","ListItem","selected","divider","key","to","App","AppBar","position","Toolbar","Typography","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.30071d33.chunk.js","sourcesContent":["export const styles = {\n  appBar: {\n    backgroundColor: '#292129',\n    height: '50px',\n    '& .MuiToolbar-regular': {\n      minHeight: '50px',\n    },\n  },\n  name: {\n    marginRight: '15px',\n  },\n  link: {\n    textTransform: 'unset',\n    color: '#a5a5a5',\n    margin: '0 20px',\n    textDecoration: 'unset',\n  },\n  form: {\n    marginLeft: '50px',\n  },\n  textField: {\n    margin: '15px 0',\n  },\n  search: {\n    marginTop: '15px',\n  },\n  detail: {\n    margin: '5px 0',\n  },\n  edit: {\n    backgroundColor: 'orange',\n    border: '4px solid orange',\n    borderRadius: '5px',\n    textDecoration: 'none',\n    fontSize: '13px',\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  publish: {\n    backgroundColor: '#0062cc',\n    '&:hover': {\n      backgroundColor: '#0062cc',\n      opacity: 0.8,\n    },\n  },\n  delete: {\n    backgroundColor: '#DD4145',\n    '&:hover': {\n      backgroundColor: '#DD4145',\n      opacity: 0.8,\n    },\n  },\n  update: {\n    backgroundColor: '#64A845',\n    '&:hover': {\n      backgroundColor: '#64A845',\n      opacity: 0.8,\n    },\n  },\n  buttonWrapper: {\n    marginTop: '20px',\n  },\n  button: {\n    marginRight: '15px',\n    color: 'white',\n    fontSize: '13px',\n    textTransform: 'none',\n    height: '25px',\n  },\n  removeAll: {\n    marginTop: '20px',\n  },\n  tutorial: {\n    marginLeft: '25px',\n  },\n};\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../http-common\";\n\nclass TutorialDataService {\n  getAll() {\n    return http.get(\"/tutorials\");\n  }\n\n  get(id) {\n    return http.get(`/tutorials/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/tutorials\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/tutorials/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/tutorials/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/tutorials`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/tutorials?title=${title}`);\n  }\n}\n\nexport default new TutorialDataService();","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nimport { TextField, Button, withStyles } from \"@material-ui/core\"\nimport { styles } from \"../css-common\"\n\nclass AddTutorial extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeTitle = this.onChangeTitle.bind(this);\n        this.onChangeDescription = this.onChangeDescription.bind(this);\n        this.saveTutorial = this.saveTutorial.bind(this);\n        this.newTutorial = this.newTutorial.bind(this);\n\n        this.state = {\n            id: null,\n            title: \"\",\n            description: \"\",\n            published: false,\n\n            submitted: false\n        };\n    }\n\n    onChangeTitle(e) {\n        this.setState({\n            title: e.target.value\n        });\n    }\n\n    onChangeDescription(e) {\n        this.setState({\n            description: e.target.value\n        });\n    }\n\n    saveTutorial() {\n        var data = {\n            title: this.state.title,\n            description: this.state.description\n        };\n\n        TutorialDataService.create(data)\n            .then(response => {\n                this.setState({\n                    id: response.data.id,\n                    title: response.data.title,\n                    description: response.data.description,\n                    published: response.data.published,\n\n                    submitted: true\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    newTutorial() {\n        this.setState({\n            id: null,\n            title: \"\",\n            description: \"\",\n            published: false,\n\n            submitted: false\n        });\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <React.Fragment>\n                {this.state.submitted ? (\n                    <div className={classes.form}>\n                        <h4>You submitted successfully!</h4>\n                        <Button\n                            size=\"small\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            onClick={this.newTutorial}>\n                            Add\n                        </Button>\n                    </div>\n                ) : (\n                        <div className={classes.form}>\n                            <div className={classes.textField}>\n                                <TextField\n                                    label=\"Title\"\n                                    name=\"title\"\n                                    value={this.state.title}\n                                    onChange={this.onChangeTitle}\n                                    required\n                                />\n                            </div>\n\n                            <div className={classes.textField}>\n                                <TextField\n                                    label=\"Description\"\n                                    name=\"description\"\n                                    value={this.state.description}\n                                    onChange={this.onChangeDescription}\n                                    required\n                                />\n                            </div>\n\n                            <Button\n                                size=\"small\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={this.saveTutorial}>\n                                Submit\n                            </Button>\n                        </div>\n                    )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles)(AddTutorial)","import React, { Component } from 'react';\nimport TutorialDataService from '../services/tutorial.service';\n\nimport { styles } from '../css-common';\nimport { TextField, Button, withStyles } from '@material-ui/core';\n\nclass Tutorial extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTutorial = this.getTutorial.bind(this);\n    this.updatePublished = this.updatePublished.bind(this);\n    this.updateTutorial = this.updateTutorial.bind(this);\n    this.deleteTutorial = this.deleteTutorial.bind(this);\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: '',\n        description: '',\n        published: false,\n      },\n      message: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id);\n  }\n\n  onChangeTitle(e) {\n    const title = e.target.value;\n\n    this.setState(function (prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title,\n        },\n      };\n    });\n  }\n\n  onChangeDescription(e) {\n    const description = e.target.value;\n\n    this.setState(prevState => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description,\n      },\n    }));\n  }\n\n  getTutorial(id) {\n    TutorialDataService.get(id)\n      .then(response => {\n        this.setState({\n          currentTutorial: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updatePublished(status) {\n    var data = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status,\n    };\n\n    TutorialDataService.update(this.state.currentTutorial.id, data)\n      .then(response => {\n        this.setState(prevState => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published: status,\n          },\n        }));\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial.id,\n      this.state.currentTutorial\n    )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          message: 'The tutorial was updated successfully!',\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  deleteTutorial() {\n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/tutorials');\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentTutorial } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className={classes.form}>\n            <h2>KDrama</h2>\n            <form>\n              <div>\n                <TextField\n                  className={classes.textField}\n                  label='Title'\n                  name='title'\n                  value={currentTutorial.title}\n                  onChange={this.onChangeTitle}\n                  required\n                />\n              </div>\n              <div>\n                <TextField\n                  className={classes.textField}\n                  label='Description'\n                  name='description'\n                  value={currentTutorial.description}\n                  onChange={this.onChangeDescription}\n                  required\n                />\n              </div>\n\n              <div className='form-group'>\n                <label>\n                  <strong>Status: </strong>\n                </label>\n                {currentTutorial.published ? 'Published' : 'Pending'}\n              </div>\n            </form>\n            <div className={classes.buttonWrapper}>\n              {currentTutorial.published ? (\n                <Button\n                  className={`${classes.publish} ${classes.button}`}\n                  onClick={() => this.updatePublished(false)}\n                >\n                  UnPublish\n                </Button>\n              ) : (\n                <Button\n                  className={`${classes.publish} ${classes.button}`}\n                  onClick={() => this.updatePublished(true)}\n                >\n                  Publish\n                </Button>\n              )}\n              <Button\n                className={`${classes.delete} ${classes.button}`}\n                onClick={this.deleteTutorial}\n              >\n                Delete\n              </Button>\n\n              <Button\n                type='submit'\n                className={`${classes.update} ${classes.button}`}\n                onClick={this.updateTutorial}\n              >\n                Update\n              </Button>\n            </div>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a K-Drama... :)</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Tutorial);\n","import React, { Component } from 'react';\nimport TutorialDataService from '../services/tutorial.service';\nimport { Link } from 'react-router-dom';\n\nimport { styles } from '../css-common';\nimport {\n  TextField,\n  Button,\n  Grid,\n  ListItem,\n  withStyles,\n} from '@material-ui/core';\n\nclass TutorialsList extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\n    this.retrieveTutorials = this.retrieveTutorials.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n    this.setActiveTutorial = this.setActiveTutorial.bind(this);\n    this.removeAllTutorials = this.removeAllTutorials.bind(this);\n    this.searchTitle = this.searchTitle.bind(this);\n\n    this.state = {\n      tutorials: [],\n      currentTutorial: null,\n      currentIndex: -1,\n      searchTitle: '',\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveTutorials();\n  }\n\n  onChangeSearchTitle(e) {\n    const searchTitle = e.target.value;\n\n    this.setState({\n      searchTitle: searchTitle,\n    });\n  }\n\n  retrieveTutorials() {\n    TutorialDataService.getAll()\n      .then(response => {\n        this.setState({\n          tutorials: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  refreshList() {\n    this.retrieveTutorials();\n    this.setState({\n      currentTutorial: null,\n      currentIndex: -1,\n    });\n  }\n\n  setActiveTutorial(tutorial, index) {\n    this.setState({\n      currentTutorial: tutorial,\n      currentIndex: index,\n    });\n  }\n\n  removeAllTutorials() {\n    TutorialDataService.deleteAll()\n      .then(response => {\n        console.log(response.data);\n        this.refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  searchTitle() {\n    TutorialDataService.findByTitle(this.state.searchTitle)\n      .then(response => {\n        this.setState({\n          tutorials: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const {\n      searchTitle,\n      tutorials,\n      currentTutorial,\n      currentIndex,\n    } = this.state;\n\n    return (\n      <div className={classes.form}>\n        <Grid container>\n          <Grid\n            className={classes.search}\n            item\n            sm={12}\n            xs={12}\n            md={12}\n            xl={12}\n            lg={12}\n          >\n            <TextField\n              label='Search by title'\n              value={searchTitle}\n              onChange={this.onChangeSearchTitle}\n            />\n            <Button\n              size='small'\n              variant='outlined'\n              className={classes.textField}\n              onClick={this.searchTitle}\n            >\n              Search\n            </Button>\n          </Grid>\n          <Grid item md={4}>\n            <h2>KDrama List</h2>\n\n            <div className='list-group'>\n              {tutorials &&\n                tutorials.map((tutorial, index) => (\n                  <ListItem\n                    selected={index === currentIndex}\n                    onClick={() => this.setActiveTutorial(tutorial, index)}\n                    divider\n                    button\n                    key={index}\n                  >\n                    {tutorial.title}\n                  </ListItem>\n                ))}\n            </div>\n\n            <Button\n              className={`${classes.button} ${classes.removeAll}`}\n              size='small'\n              color='secondary'\n              variant='contained'\n              onClick={this.removeAllTutorials}\n            >\n              Remove All\n            </Button>\n          </Grid>\n          <Grid item md={8}>\n            {currentTutorial ? (\n              <div className={classes.tutorial}>\n                <h4>Tutorial</h4>\n                <div className={classes.detail}>\n                  <label>\n                    <strong>Title:</strong>\n                  </label>{' '}\n                  {currentTutorial.title}\n                </div>\n                <div className={classes.detail}>\n                  <label>\n                    <strong>Description:</strong>\n                  </label>{' '}\n                  {currentTutorial.description}\n                </div>\n                <div className={classes.detail}>\n                  <label>\n                    <strong>Status:</strong>\n                  </label>{' '}\n                  {currentTutorial.published ? 'Published' : 'Pending'}\n                </div>\n\n                <Link\n                  to={'/tutorials/' + currentTutorial.id}\n                  className={classes.edit}\n                >\n                  Edit\n                </Link>\n              </div>\n            ) : (\n              <div>\n                <br />\n                <p className={classes.tutorial}>\n                  Please click on a K-Drama... :)\n                </p>\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TutorialsList);\n","import React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport { styles } from './css-common';\n\nimport AddTutorial from './components/add-tutorial.component';\nimport Tutorial from './components/tutorial.component';\nimport TutorialsList from './components/tutorials-list.component';\n\nimport { AppBar, Toolbar, Typography, withStyles } from '@material-ui/core';\n\nclass App extends Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <AppBar className={classes.appBar} position='static'>\n          <Toolbar>\n            <Typography className={classes.name} variant='h6'>\n              K-Drama\n            </Typography>\n            <Link to={'/tutorials'} className={classes.link}>\n              <Typography variant='body2'>KDrama</Typography>\n            </Link>\n            <Link to={'/add'} className={classes.link}>\n              <Typography variant='body2'>Add</Typography>\n            </Link>\n          </Toolbar>\n        </AppBar>\n\n        <Switch>\n          <Route exact path={['/', '/tutorials']} component={TutorialsList} />\n          <Route exact path='/add' component={AddTutorial} />\n          <Route path='/tutorials/:id' component={Tutorial} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}